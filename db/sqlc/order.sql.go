// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id_account,
    id_service,
    price_service,
    status
) VALUES (
    $1, $2, $3, $4
) RETURNING id, id_account, id_service, price_service, status, created_at
`

type CreateOrderParams struct {
	IDAccount    int64  `json:"id_account"`
	IDService    int64  `json:"id_service"`
	PriceService int64  `json:"price_service"`
	Status       string `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.IDAccount,
		arg.IDService,
		arg.PriceService,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDAccount,
		&i.IDService,
		&i.PriceService,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, id_account, id_service, price_service, status, created_at FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrderById(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDAccount,
		&i.IDService,
		&i.PriceService,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrdersByServiceId = `-- name: ListOrdersByServiceId :many
SELECT id, id_account, id_service, price_service, status, created_at FROM orders
WHERE id_service = $1
`

func (q *Queries) ListOrdersByServiceId(ctx context.Context, idService int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByServiceId, idService)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.IDAccount,
			&i.IDService,
			&i.PriceService,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, id_account, id_service, price_service, status, created_at
`

type UpdateOrderParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IDAccount,
		&i.IDService,
		&i.PriceService,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
