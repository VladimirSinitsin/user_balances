// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: service.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    name,
    price
) VALUES (
    $1, $2
) RETURNING id, name, price
`

type CreateServiceParams struct {
	Name  string `json:"name"`
	Price int64  `json:"price"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService, arg.Name, arg.Price)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteService, id)
	return err
}

const getServiceById = `-- name: GetServiceById :one
SELECT id, name, price FROM services
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceById(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getServiceById, id)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const getServiceByName = `-- name: GetServiceByName :one
SELECT id, name, price FROM services
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetServiceByName(ctx context.Context, name string) (Service, error) {
	row := q.db.QueryRowContext(ctx, getServiceByName, name)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT id, name, price FROM services
ORDER BY name
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
